#include <zuazo/Consumers/Window.h>

#include "../GLFW.h"

namespace Zuazo {

static_assert(static_cast<int>(GLFW::Window::State::NORMAL) == static_cast<int>(Consumers::Window::State::NORMAL), "NORMAL state value does not match");
static_assert(static_cast<int>(GLFW::Window::State::HIDDEN) == static_cast<int>(Consumers::Window::State::HIDDEN), "HIDDEN state value does not match");
static_assert(static_cast<int>(GLFW::Window::State::FULLSCREEN) == static_cast<int>(Consumers::Window::State::FULLSCREEN), "FULLSCREEN state value does not match");
static_assert(static_cast<int>(GLFW::Window::State::ICONIFIED) == static_cast<int>(Consumers::Window::State::ICONIFIED), "ICONIFIED state value does not match");
static_assert(static_cast<int>(GLFW::Window::State::MAXIMIZED) == static_cast<int>(Consumers::Window::State::MAXIMIZED), "MAXIMIZED state value does not match");

static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NONE) == static_cast<int>(Consumers::Window::KeyboardKey::NONE), "NONE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::SPACE) == static_cast<int>(Consumers::Window::KeyboardKey::SPACE), "SPACE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::APOSTROPHE) == static_cast<int>(Consumers::Window::KeyboardKey::APOSTROPHE), "APOSTROPHE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::COMMA) == static_cast<int>(Consumers::Window::KeyboardKey::COMMA), "COMMA keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::MINUS) == static_cast<int>(Consumers::Window::KeyboardKey::MINUS), "MINUS keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::PERIOD) == static_cast<int>(Consumers::Window::KeyboardKey::PERIOD), "PERIOD keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::SLASH) == static_cast<int>(Consumers::Window::KeyboardKey::SLASH), "SLASH keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB0) == static_cast<int>(Consumers::Window::KeyboardKey::NB0), "NB0 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB1) == static_cast<int>(Consumers::Window::KeyboardKey::NB1), "NB1 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB2) == static_cast<int>(Consumers::Window::KeyboardKey::NB2), "NB2 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB3) == static_cast<int>(Consumers::Window::KeyboardKey::NB3), "NB3 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB4) == static_cast<int>(Consumers::Window::KeyboardKey::NB4), "NB4 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB5) == static_cast<int>(Consumers::Window::KeyboardKey::NB5), "NB5 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB6) == static_cast<int>(Consumers::Window::KeyboardKey::NB6), "NB6 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB7) == static_cast<int>(Consumers::Window::KeyboardKey::NB7), "NB7 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB8) == static_cast<int>(Consumers::Window::KeyboardKey::NB8), "NB8 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NB9) == static_cast<int>(Consumers::Window::KeyboardKey::NB9), "NB9 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::SEMICOLON) == static_cast<int>(Consumers::Window::KeyboardKey::SEMICOLON), "SEMICOLON keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::EQUAL) == static_cast<int>(Consumers::Window::KeyboardKey::EQUAL), "EQUAL keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::A) == static_cast<int>(Consumers::Window::KeyboardKey::A), "A keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::B) == static_cast<int>(Consumers::Window::KeyboardKey::B), "B keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::C) == static_cast<int>(Consumers::Window::KeyboardKey::C), "C keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::D) == static_cast<int>(Consumers::Window::KeyboardKey::D), "D keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::E) == static_cast<int>(Consumers::Window::KeyboardKey::E), "E keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F) == static_cast<int>(Consumers::Window::KeyboardKey::F), "F keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::G) == static_cast<int>(Consumers::Window::KeyboardKey::G), "G keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::H) == static_cast<int>(Consumers::Window::KeyboardKey::H), "H keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::I) == static_cast<int>(Consumers::Window::KeyboardKey::I), "I keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::J) == static_cast<int>(Consumers::Window::KeyboardKey::J), "J keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::K) == static_cast<int>(Consumers::Window::KeyboardKey::K), "K keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::L) == static_cast<int>(Consumers::Window::KeyboardKey::L), "L keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::M) == static_cast<int>(Consumers::Window::KeyboardKey::M), "M keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::N) == static_cast<int>(Consumers::Window::KeyboardKey::N), "N keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::O) == static_cast<int>(Consumers::Window::KeyboardKey::O), "O keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::P) == static_cast<int>(Consumers::Window::KeyboardKey::P), "P keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::Q) == static_cast<int>(Consumers::Window::KeyboardKey::Q), "Q keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::R) == static_cast<int>(Consumers::Window::KeyboardKey::R), "R keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::S) == static_cast<int>(Consumers::Window::KeyboardKey::S), "S keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::T) == static_cast<int>(Consumers::Window::KeyboardKey::T), "T keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::U) == static_cast<int>(Consumers::Window::KeyboardKey::U), "U keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::V) == static_cast<int>(Consumers::Window::KeyboardKey::V), "V keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::W) == static_cast<int>(Consumers::Window::KeyboardKey::W), "W keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::X) == static_cast<int>(Consumers::Window::KeyboardKey::X), "X keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::Y) == static_cast<int>(Consumers::Window::KeyboardKey::Y), "Y keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::Z) == static_cast<int>(Consumers::Window::KeyboardKey::Z), "Z keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT_BRACKET) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT_BRACKET), "LEFT_BRACKET keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::BACKSLASH) == static_cast<int>(Consumers::Window::KeyboardKey::BACKSLASH), "BACKSLASH keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT_BRACKET) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT_BRACKET), "RIGHT_BRACKET keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::GRAVE_ACCENT) == static_cast<int>(Consumers::Window::KeyboardKey::GRAVE_ACCENT), "GRAVE_ACCENT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::WORLD_1) == static_cast<int>(Consumers::Window::KeyboardKey::WORLD_1), "WORLD_1 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::WORLD_2) == static_cast<int>(Consumers::Window::KeyboardKey::WORLD_2), "WORLD_2 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::ESCAPE) == static_cast<int>(Consumers::Window::KeyboardKey::ESCAPE), "ESCAPE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::ENTER) == static_cast<int>(Consumers::Window::KeyboardKey::ENTER), "ENTER keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::TAB) == static_cast<int>(Consumers::Window::KeyboardKey::TAB), "TAB keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::BACKSPACE) == static_cast<int>(Consumers::Window::KeyboardKey::BACKSPACE), "BACKSPACE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::INSERT) == static_cast<int>(Consumers::Window::KeyboardKey::INSERT), "INSERT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::DELETE) == static_cast<int>(Consumers::Window::KeyboardKey::DELETE), "DELETE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT), "RIGHT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT), "LEFT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::DOWN) == static_cast<int>(Consumers::Window::KeyboardKey::DOWN), "DOWN keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::UP) == static_cast<int>(Consumers::Window::KeyboardKey::UP), "UP keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::PAGE_UP) == static_cast<int>(Consumers::Window::KeyboardKey::PAGE_UP), "PAGE_UP keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::PAGE_DOWN) == static_cast<int>(Consumers::Window::KeyboardKey::PAGE_DOWN), "PAGE_DOWN keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::HOME) == static_cast<int>(Consumers::Window::KeyboardKey::HOME), "HOME keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::END) == static_cast<int>(Consumers::Window::KeyboardKey::END), "END keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::CAPS_LOCK) == static_cast<int>(Consumers::Window::KeyboardKey::CAPS_LOCK), "CAPS_LOCK keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::SCROLL_LOCK) == static_cast<int>(Consumers::Window::KeyboardKey::SCROLL_LOCK), "SCROLL_LOCK keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::NUM_LOCK) == static_cast<int>(Consumers::Window::KeyboardKey::NUM_LOCK), "NUM_LOCK keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::PRINT_SCREEN) == static_cast<int>(Consumers::Window::KeyboardKey::PRINT_SCREEN), "PRINT_SCREEN keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::PAUSE) == static_cast<int>(Consumers::Window::KeyboardKey::PAUSE), "PAUSE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F1) == static_cast<int>(Consumers::Window::KeyboardKey::F1), "F1 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F2) == static_cast<int>(Consumers::Window::KeyboardKey::F2), "F2 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F3) == static_cast<int>(Consumers::Window::KeyboardKey::F3), "F3 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F4) == static_cast<int>(Consumers::Window::KeyboardKey::F4), "F4 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F5) == static_cast<int>(Consumers::Window::KeyboardKey::F5), "F5 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F6) == static_cast<int>(Consumers::Window::KeyboardKey::F6), "F6 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F7) == static_cast<int>(Consumers::Window::KeyboardKey::F7), "F7 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F8) == static_cast<int>(Consumers::Window::KeyboardKey::F8), "F8 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F9) == static_cast<int>(Consumers::Window::KeyboardKey::F9), "F9 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F10) == static_cast<int>(Consumers::Window::KeyboardKey::F10), "F10 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F11) == static_cast<int>(Consumers::Window::KeyboardKey::F11), "F11 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F12) == static_cast<int>(Consumers::Window::KeyboardKey::F12), "F12 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F13) == static_cast<int>(Consumers::Window::KeyboardKey::F13), "F13 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F14) == static_cast<int>(Consumers::Window::KeyboardKey::F14), "F14 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F15) == static_cast<int>(Consumers::Window::KeyboardKey::F15), "F15 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F16) == static_cast<int>(Consumers::Window::KeyboardKey::F16), "F16 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F17) == static_cast<int>(Consumers::Window::KeyboardKey::F17), "F17 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F18) == static_cast<int>(Consumers::Window::KeyboardKey::F18), "F18 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F19) == static_cast<int>(Consumers::Window::KeyboardKey::F19), "F19 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F20) == static_cast<int>(Consumers::Window::KeyboardKey::F20), "F20 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F21) == static_cast<int>(Consumers::Window::KeyboardKey::F21), "F21 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F22) == static_cast<int>(Consumers::Window::KeyboardKey::F22), "F22 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F23) == static_cast<int>(Consumers::Window::KeyboardKey::F23), "F23 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F24) == static_cast<int>(Consumers::Window::KeyboardKey::F24), "F24 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::F25) == static_cast<int>(Consumers::Window::KeyboardKey::F25), "F25 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_0) == static_cast<int>(Consumers::Window::KeyboardKey::KP_0), "KP_0 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_1) == static_cast<int>(Consumers::Window::KeyboardKey::KP_1), "KP_1 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_2) == static_cast<int>(Consumers::Window::KeyboardKey::KP_2), "KP_2 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_3) == static_cast<int>(Consumers::Window::KeyboardKey::KP_3), "KP_3 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_4) == static_cast<int>(Consumers::Window::KeyboardKey::KP_4), "KP_4 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_5) == static_cast<int>(Consumers::Window::KeyboardKey::KP_5), "KP_5 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_6) == static_cast<int>(Consumers::Window::KeyboardKey::KP_6), "KP_6 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_7) == static_cast<int>(Consumers::Window::KeyboardKey::KP_7), "KP_7 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_8) == static_cast<int>(Consumers::Window::KeyboardKey::KP_8), "KP_8 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_9) == static_cast<int>(Consumers::Window::KeyboardKey::KP_9), "KP_9 keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_DECIMAL) == static_cast<int>(Consumers::Window::KeyboardKey::KP_DECIMAL), "KP_DECIMAL keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_DIVIDE) == static_cast<int>(Consumers::Window::KeyboardKey::KP_DIVIDE), "KP_DIVIDE keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_MULTIPLY) == static_cast<int>(Consumers::Window::KeyboardKey::KP_MULTIPLY), "KP_MULTIPLY keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_SUBTRACT) == static_cast<int>(Consumers::Window::KeyboardKey::KP_SUBTRACT), "KP_SUBTRACT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_ADD) == static_cast<int>(Consumers::Window::KeyboardKey::KP_ADD), "KP_ADD keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_ENTER) == static_cast<int>(Consumers::Window::KeyboardKey::KP_ENTER), "KP_ENTER keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::KP_EQUAL) == static_cast<int>(Consumers::Window::KeyboardKey::KP_EQUAL), "KP_EQUAL keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT_SHIFT) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT_SHIFT), "LEFT_SHIFT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT_CONTROL) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT_CONTROL), "LEFT_CONTROL keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT_ALT) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT_ALT), "LEFT_ALT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::LEFT_SUPER) == static_cast<int>(Consumers::Window::KeyboardKey::LEFT_SUPER), "LEFT_SUPER keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT_SHIFT) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT_SHIFT), "RIGHT_SHIFT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT_CONTROL) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT_CONTROL), "RIGHT_CONTROL keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT_ALT) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT_ALT), "RIGHT_ALT keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::RIGHT_SUPER) == static_cast<int>(Consumers::Window::KeyboardKey::RIGHT_SUPER), "RIGHT_SUPER keycode does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardKey::MENU) == static_cast<int>(Consumers::Window::KeyboardKey::MENU), "MENU keycode does not match");


static_assert(static_cast<int>(GLFW::Window::KeyboardEvent::RELEASE) == static_cast<int>(Consumers::Window::KeyboardEvent::RELEASE), "RELEASE event does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardEvent::PRESS) == static_cast<int>(Consumers::Window::KeyboardEvent::PRESS), "PRESS event does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardEvent::REPEAT) == static_cast<int>(Consumers::Window::KeyboardEvent::REPEAT), "REPEAT event does not match");

static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::NONE) == static_cast<int>(Consumers::Window::KeyboardModifiers::NONE), "NONE keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::SHIFT) == static_cast<int>(Consumers::Window::KeyboardModifiers::SHIFT), "SHIFT keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::CONTROL) == static_cast<int>(Consumers::Window::KeyboardModifiers::CONTROL), "CONTROL keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::ALT) == static_cast<int>(Consumers::Window::KeyboardModifiers::ALT), "ALT keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::SUPER) == static_cast<int>(Consumers::Window::KeyboardModifiers::SUPER), "SUPER keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::CAPS_LOCK) == static_cast<int>(Consumers::Window::KeyboardModifiers::CAPS_LOCK), "CAPS_LOCK keyboard modifier bit does not match");
static_assert(static_cast<int>(GLFW::Window::KeyboardModifiers::NUM_LOCK) == static_cast<int>(Consumers::Window::KeyboardModifiers::NUM_LOCK), "NUM_LOCK keyboard modifier bit does not match");


static_assert(static_cast<int>(GLFW::Window::MouseButton::NB1) == static_cast<int>(Consumers::Window::MouseButton::NB1), "NB1 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB2) == static_cast<int>(Consumers::Window::MouseButton::NB2), "NB2 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB3) == static_cast<int>(Consumers::Window::MouseButton::NB3), "NB3 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB4) == static_cast<int>(Consumers::Window::MouseButton::NB4), "NB4 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB5) == static_cast<int>(Consumers::Window::MouseButton::NB5), "NB5 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB6) == static_cast<int>(Consumers::Window::MouseButton::NB6), "NB6 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB7) == static_cast<int>(Consumers::Window::MouseButton::NB7), "NB7 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::NB8) == static_cast<int>(Consumers::Window::MouseButton::NB8), "NB8 mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::LEFT) == static_cast<int>(Consumers::Window::MouseButton::LEFT), "LEFT mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::RIGHT) == static_cast<int>(Consumers::Window::MouseButton::RIGHT), "RIGHT mouse button's keycode does not match");
static_assert(static_cast<int>(GLFW::Window::MouseButton::MIDDLE) == static_cast<int>(Consumers::Window::MouseButton::MIDDLE), "MIDDLE mouse button's keycode does not match");

}